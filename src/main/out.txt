fn main() =>  let x = 27, y = 32  in x + y
returning new Tree  Program
Parsing src:  fn main() =>  let x = 27, y = 32  in x + y
32
loop iteration with token fn
parse statement
fn
Parsing function definition
32
32
32
parse let
32
32
32
trying to parse infix
,
32
32
32
32
32
trying to parse infix
in
32
32
trying to parse infix
+
32
trying to parse infix
EOF
received fn () -> let x = 27, y = 32 in x + y
appending fn () -> let x = 27, y = 32 in x + y
loop iteration with token fn
parse statement

received <nil>
+
[{select-1-0 1 [0 {} {1 0} 1 1 {}]} {select-2-0 1 [0 {} {2 0} 1 1 {}]} {select-2-1 1 [0 {} {2 1} 1 1 {}]} {select-3-0 1 [0 {} {3 0} 1 1 {}]} {select-3-1 1 [0 {} {3 1} 1 1 {}]} {select-3-2 1 [0 {} {3 2} 1 1 {}]} {select-4-0 1 [0 {} {4 0} 1 1 {}]} {select-4-1 1 [0 {} {4 1} 1 1 {}]} {select-4-2 1 [0 {} {4 2} 1 1 {}]} {select-4-3 1 [0 {} {4 3} 1 1 {}]} {select-5-0 1 [0 {} {5 0} 1 1 {}]} {select-5-1 1 [0 {} {5 1} 1 1 {}]} {select-5-2 1 [0 {} {5 2} 1 1 {}]} {select-5-3 1 [0 {} {5 3} 1 1 {}]} {select-5-4 1 [0 {} {5 4} 1 1 {}]}]
SC Name:  main
SC Args length:  0
Compiling Let in compileR
compileArgs: env: []
New Env:  [{x 1} {y 0}]
Default in compileR with d,  2
EAp 1
EAp 2
EVar 1
true  Buildyadic:   {[{== {}} {!= {}} {< {}} {<= {}} {> {}} {>= {}} {+ {}} {- {}} {* {}} {/ {}}]}
Going for CompileB
229 CompileE expression syntax
Env during EVar  y  in compileC,  [{x 1} {y 0}] n,  0
229 CompileE expression syntax
Env during EVar  x  in compileC,  [{x 1} {y 0}] n,  1
SC:  add stored at:  0
SC:  sub stored at:  1
SC:  main stored at:  2
Got Eval
{[] [main {}] {[0 0 0 0 0 0 0 0 0 0] -1} [{[] {[0 0 0 0 0 0 0 0 0 0] -1} []}] [] {[{2 [1 {} 1 {} {} 2 2 {}]} {2 [1 {} 1 {} {} 2 2 {}]} {0 [27 32 0 {} {} 1 {} {} {} {} 2 2 {}]} <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil>] 0 [] 2} [{main 2} {sub 1} {add 0}] 0}

main  :  {0 [27 32 0 {} {} 1 {} {} {} {} 2 2 {}]}

sub  :  {2 [1 {} 1 {} {} 2 2 {}]}

add  :  {2 [1 {} 1 {} {} 2 2 {}]}
mapping:  [{main {0 [27 32 0 {} {} 1 {} {} {} {} 2 2 {}]}} {sub {2 [1 {} 1 {} {} 2 2 {}]}} {add {2 [1 {} 1 {} {} 2 2 {}]}} {connet {0 []}} {send {1 []}}]
pushint:  1
pushint:  2
push:  3
eval:  4
get:  5
push:  6
eval:  7
get:  8
add:  9
MkInt:  10
update:  11
pop:  12
unwind:  13
push:  1
eval:  2
push:  3
eval:  4
sub:  5
update:  6
pop:  7
unwind:  8
push:  1
eval:  2
push:  3
eval:  4
add:  5
update:  6
pop:  7
unwind:  8
